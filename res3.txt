Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 42.37      2.85     2.85   459403     0.01     0.01  add_range
 31.81      4.99     2.14                             run_tests.constprop.2
 12.34      5.82     0.83      281     2.96     2.96  start_comp_counter
  7.88      6.35     0.53  6414030     0.00     0.00  mm_malloc
  2.53      6.52     0.17 11002518     0.00     0.00  delete_node
  1.78      6.64     0.12  5562865     0.00     0.00  mm_free
  0.59      6.68     0.04 11208495     0.00     0.00  insert_node
  0.59      6.72     0.04      281     0.14     2.76  eval_mm_speed
  0.15      6.73     0.01       29     0.34     0.34  read_trace.constprop.3
  0.00      6.73     0.00   918806     0.00     0.00  mem_heap_hi
  0.00      6.73     0.00   918806     0.00     0.00  mem_heap_lo
  0.00      6.73     0.00   288989     0.00     0.00  coalesce
  0.00      6.73     0.00   269698     0.00     0.00  mem_sbrk
  0.00      6.73     0.00    20995     0.00     0.00  mm_realloc
  0.00      6.73     0.00      339     0.00     0.00  mem_reset_brk
  0.00      6.73     0.00      339     0.00     0.00  mm_init
  0.00      6.73     0.00      281     0.00     0.00  get_comp_counter
  0.00      6.73     0.00       29     0.00    55.40  fcyc
  0.00      6.73     0.00       29     0.00    55.40  fsecs
  0.00      6.73     0.00       29     0.00     0.00  mem_deinit
  0.00      6.73     0.00       29     0.00     0.00  mem_heapsize
  0.00      6.73     0.00       29     0.00     0.00  mem_init
  0.00      6.73     0.00        1     0.00     0.00  mhz
  0.00      6.73     0.00        1     0.00     0.00  set_fcyc_clear_cache
  0.00      6.73     0.00        1     0.00     0.00  set_fcyc_compensate
  0.00      6.73     0.00        1     0.00     0.00  set_fcyc_epsilon
  0.00      6.73     0.00        1     0.00     0.00  set_fcyc_k
  0.00      6.73     0.00        1     0.00     0.00  set_fcyc_maxsamples

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.15% of 6.73 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    2.14    4.59                 run_tests.constprop.2 [1]
                2.85    0.00  459403/459403      add_range [2]
                0.00    1.61      29/29          fsecs [4]
                0.08    0.02  916464/6414030     mm_malloc [7]
                0.02    0.01  824848/5562865     mm_free [8]
                0.01    0.00      29/29          read_trace.constprop.3 [11]
                0.00    0.00  824212/11208495     insert_node [10]
                0.00    0.00    2486/20995       mm_realloc [13]
                0.00    0.00      58/339         mm_init [18]
                0.00    0.00      58/339         mem_reset_brk [17]
                0.00    0.00      29/29          mem_init [22]
                0.00    0.00      29/29          mem_heapsize [21]
                0.00    0.00      29/29          mem_deinit [20]
-----------------------------------------------
                2.85    0.00  459403/459403      run_tests.constprop.2 [1]
[2]     42.3    2.85    0.00  459403         add_range [2]
                0.00    0.00  918806/918806      mem_heap_hi [14]
                0.00    0.00  918806/918806      mem_heap_lo [15]
-----------------------------------------------
                0.00    1.61      29/29          fsecs [4]
[3]     23.9    0.00    1.61      29         fcyc [3]
                0.83    0.00     281/281         start_comp_counter [5]
                0.04    0.74     281/281         eval_mm_speed [6]
                0.00    0.00     281/281         get_comp_counter [19]
-----------------------------------------------
                0.00    1.61      29/29          run_tests.constprop.2 [1]
[4]     23.9    0.00    1.61      29         fsecs [4]
                0.00    1.61      29/29          fcyc [3]
-----------------------------------------------
                0.83    0.00     281/281         fcyc [3]
[5]     12.3    0.83    0.00     281         start_comp_counter [5]
-----------------------------------------------
                0.04    0.74     281/281         fcyc [3]
[6]     11.5    0.04    0.74     281         eval_mm_speed [6]
                0.45    0.10 5477936/6414030     mm_malloc [7]
                0.10    0.06 4737995/5562865     mm_free [8]
                0.02    0.00 4733643/11208495     insert_node [10]
                0.00    0.00   18509/20995       mm_realloc [13]
                0.00    0.00     281/339         mm_init [18]
                0.00    0.00     281/339         mem_reset_brk [17]
-----------------------------------------------
                0.00    0.00   19630/6414030     mm_realloc [13]
                0.08    0.02  916464/6414030     run_tests.constprop.2 [1]
                0.45    0.10 5477936/6414030     eval_mm_speed [6]
[7]      9.6    0.53    0.12 6414030         mm_malloc [7]
                0.09    0.00 6144671/11002518     delete_node [9]
                0.02    0.00 5630988/11208495     insert_node [10]
                0.00    0.00  269359/288989      coalesce [12]
                0.00    0.00  269359/269698      mem_sbrk [16]
-----------------------------------------------
                0.00    0.00      22/5562865     mm_realloc [13]
                0.02    0.01  824848/5562865     run_tests.constprop.2 [1]
                0.10    0.06 4737995/5562865     eval_mm_speed [6]
[8]      2.9    0.12    0.07 5562865         mm_free [8]
                0.07    0.00 4649699/11002518     delete_node [9]
-----------------------------------------------
                0.00    0.00  208148/11002518     coalesce [12]
                0.07    0.00 4649699/11002518     mm_free [8]
                0.09    0.00 6144671/11002518     mm_malloc [7]
[9]      2.5    0.17    0.00 11002518         delete_node [9]
-----------------------------------------------
                0.00    0.00   19652/11208495     mm_realloc [13]
                0.00    0.00  824212/11208495     run_tests.constprop.2 [1]
                0.02    0.00 4733643/11208495     eval_mm_speed [6]
                0.02    0.00 5630988/11208495     mm_malloc [7]
[10]     0.6    0.04    0.00 11208495         insert_node [10]
-----------------------------------------------
                0.01    0.00      29/29          run_tests.constprop.2 [1]
[11]     0.1    0.01    0.00      29         read_trace.constprop.3 [11]
-----------------------------------------------
                0.00    0.00   19630/288989      mm_realloc [13]
                0.00    0.00  269359/288989      mm_malloc [7]
[12]     0.0    0.00    0.00  288989         coalesce [12]
                0.00    0.00  208148/11002518     delete_node [9]
-----------------------------------------------
                0.00    0.00    2486/20995       run_tests.constprop.2 [1]
                0.00    0.00   18509/20995       eval_mm_speed [6]
[13]     0.0    0.00    0.00   20995         mm_realloc [13]
                0.00    0.00   19630/6414030     mm_malloc [7]
                0.00    0.00   19630/288989      coalesce [12]
                0.00    0.00   19652/11208495     insert_node [10]
                0.00    0.00      22/5562865     mm_free [8]
-----------------------------------------------
                0.00    0.00  918806/918806      add_range [2]
[14]     0.0    0.00    0.00  918806         mem_heap_hi [14]
-----------------------------------------------
                0.00    0.00  918806/918806      add_range [2]
[15]     0.0    0.00    0.00  918806         mem_heap_lo [15]
-----------------------------------------------
                0.00    0.00     339/269698      mm_init [18]
                0.00    0.00  269359/269698      mm_malloc [7]
[16]     0.0    0.00    0.00  269698         mem_sbrk [16]
-----------------------------------------------
                0.00    0.00      58/339         run_tests.constprop.2 [1]
                0.00    0.00     281/339         eval_mm_speed [6]
[17]     0.0    0.00    0.00     339         mem_reset_brk [17]
-----------------------------------------------
                0.00    0.00      58/339         run_tests.constprop.2 [1]
                0.00    0.00     281/339         eval_mm_speed [6]
[18]     0.0    0.00    0.00     339         mm_init [18]
                0.00    0.00     339/269698      mem_sbrk [16]
-----------------------------------------------
                0.00    0.00     281/281         fcyc [3]
[19]     0.0    0.00    0.00     281         get_comp_counter [19]
-----------------------------------------------
                0.00    0.00      29/29          run_tests.constprop.2 [1]
[20]     0.0    0.00    0.00      29         mem_deinit [20]
-----------------------------------------------
                0.00    0.00      29/29          run_tests.constprop.2 [1]
[21]     0.0    0.00    0.00      29         mem_heapsize [21]
-----------------------------------------------
                0.00    0.00      29/29          run_tests.constprop.2 [1]
[22]     0.0    0.00    0.00      29         mem_init [22]
-----------------------------------------------
                0.00    0.00       1/1           init_fsecs [42]
[23]     0.0    0.00    0.00       1         mhz [23]
-----------------------------------------------
                0.00    0.00       1/1           init_fsecs [42]
[24]     0.0    0.00    0.00       1         set_fcyc_clear_cache [24]
-----------------------------------------------
                0.00    0.00       1/1           init_fsecs [42]
[25]     0.0    0.00    0.00       1         set_fcyc_compensate [25]
-----------------------------------------------
                0.00    0.00       1/1           init_fsecs [42]
[26]     0.0    0.00    0.00       1         set_fcyc_epsilon [26]
-----------------------------------------------
                0.00    0.00       1/1           init_fsecs [42]
[27]     0.0    0.00    0.00       1         set_fcyc_k [27]
-----------------------------------------------
                0.00    0.00       1/1           init_fsecs [42]
[28]     0.0    0.00    0.00       1         set_fcyc_maxsamples [28]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [2] add_range (mdriver.c)  [15] mem_heap_lo            [11] read_trace.constprop.3 (mdriver.c)
  [12] coalesce (mm.c)        [21] mem_heapsize            [1] run_tests.constprop.2 (mdriver.c)
   [9] delete_node (mm.c)     [22] mem_init               [24] set_fcyc_clear_cache
   [6] eval_mm_speed (mdriver.c) [17] mem_reset_brk       [25] set_fcyc_compensate
   [3] fcyc                   [16] mem_sbrk               [26] set_fcyc_epsilon
   [4] fsecs                  [23] mhz                    [27] set_fcyc_k
  [19] get_comp_counter        [8] mm_free                [28] set_fcyc_maxsamples
  [10] insert_node (mm.c)     [18] mm_init                 [5] start_comp_counter
  [20] mem_deinit              [7] mm_malloc
  [14] mem_heap_hi            [13] mm_realloc
